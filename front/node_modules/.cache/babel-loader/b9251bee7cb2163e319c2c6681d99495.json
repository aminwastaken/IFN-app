{"ast":null,"code":"import { HOST } from './contants';\n\nconst checkError = res => {\n  if (res.status !== 200) {\n    throw new Error(res);\n    console.log(res);\n  }\n\n  return res;\n};\n\nexport const getRegions = () => {\n  const url = `${HOST}/regions`;\n  return fetch(url).then(checkError).then(res => res.json());\n};\nexport const getDepartments = function () {\n  let region = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  const params = new URLSearchParams({\n    region\n  });\n  const url = `${HOST}/departments?${params}`;\n  return fetch(url).then(checkError).then(res => res.json());\n};\nexport const getTownships = function () {\n  let region = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let department = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  const querys = new URLSearchParams({\n    region,\n    department\n  });\n  const url = `${HOST}/townships?${querys}`;\n  return fetch(url).then(checkError).then(res => res.json());\n};\nexport const getTownshipByFullAddress = function () {\n  let region = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let department = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let township = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  const querys = new URLSearchParams({\n    region,\n    department,\n    township\n  });\n  const url = `${HOST}/townships?${querys}`;\n  return fetch(url).then(checkError).then(res => res.json());\n};\nexport const getTownshipByPostalCode = function () {\n  let postalCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  const querys = new URLSearchParams({\n    postalCode\n  });\n  const url = `${HOST}/townships?${querys}`;\n  return fetch(url).then(checkError).then(res => res.json());\n};","map":{"version":3,"sources":["/home/amin/documents/school/green-it/IFN-app/front/src/API/main.js"],"names":["HOST","checkError","res","status","Error","console","log","getRegions","url","fetch","then","json","getDepartments","region","params","URLSearchParams","getTownships","department","querys","getTownshipByFullAddress","township","getTownshipByPostalCode","postalCode"],"mappings":"AAAA,SAASA,IAAT,QAAqB,YAArB;;AAEA,MAAMC,UAAU,GAAIC,GAAD,IAAS;AAC1B,MAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,UAAM,IAAIC,KAAJ,CAAUF,GAAV,CAAN;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACD;;AACD,SAAOA,GAAP;AACD,CAND;;AAQA,OAAO,MAAMK,UAAU,GAAG,MAAM;AAC9B,QAAMC,GAAG,GAAI,GAAER,IAAK,UAApB;AACA,SAAOS,KAAK,CAACD,GAAD,CAAL,CACJE,IADI,CACCT,UADD,EAEJS,IAFI,CAEER,GAAD,IAASA,GAAG,CAACS,IAAJ,EAFV,CAAP;AAGD,CALM;AAOP,OAAO,MAAMC,cAAc,GAAG,YAAkB;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;AAC9C,QAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAoB;AAAEF,IAAAA;AAAF,GAApB,CAAf;AACA,QAAML,GAAG,GAAI,GAAER,IAAK,gBAAec,MAAO,EAA1C;AACA,SAAOL,KAAK,CAACD,GAAD,CAAL,CACJE,IADI,CACCT,UADD,EAEJS,IAFI,CAEER,GAAD,IAASA,GAAG,CAACS,IAAJ,EAFV,CAAP;AAGD,CANM;AAQP,OAAO,MAAMK,YAAY,GAAG,YAAkC;AAAA,MAAjCH,MAAiC,uEAAxB,EAAwB;AAAA,MAApBI,UAAoB,uEAAP,EAAO;AAC5D,QAAMC,MAAM,GAAG,IAAIH,eAAJ,CAAoB;AAAEF,IAAAA,MAAF;AAAUI,IAAAA;AAAV,GAApB,CAAf;AACA,QAAMT,GAAG,GAAI,GAAER,IAAK,cAAakB,MAAO,EAAxC;AACA,SAAOT,KAAK,CAACD,GAAD,CAAL,CACJE,IADI,CACCT,UADD,EAEJS,IAFI,CAEER,GAAD,IAASA,GAAG,CAACS,IAAJ,EAFV,CAAP;AAGD,CANM;AAQP,OAAO,MAAMQ,wBAAwB,GAAG,YAAiD;AAAA,MAAhDN,MAAgD,uEAAvC,EAAuC;AAAA,MAAnCI,UAAmC,uEAAtB,EAAsB;AAAA,MAAlBG,QAAkB,uEAAP,EAAO;AACvF,QAAMF,MAAM,GAAG,IAAIH,eAAJ,CAAoB;AAAEF,IAAAA,MAAF;AAAUI,IAAAA,UAAV;AAAsBG,IAAAA;AAAtB,GAApB,CAAf;AACA,QAAMZ,GAAG,GAAI,GAAER,IAAK,cAAakB,MAAO,EAAxC;AACA,SAAOT,KAAK,CAACD,GAAD,CAAL,CACJE,IADI,CACCT,UADD,EAEJS,IAFI,CAEER,GAAD,IAASA,GAAG,CAACS,IAAJ,EAFV,CAAP;AAGD,CANM;AAQP,OAAO,MAAMU,uBAAuB,GAAG,YAAqB;AAAA,MAApBC,UAAoB,uEAAP,EAAO;AAC1D,QAAMJ,MAAM,GAAG,IAAIH,eAAJ,CAAoB;AAAEO,IAAAA;AAAF,GAApB,CAAf;AACA,QAAMd,GAAG,GAAI,GAAER,IAAK,cAAakB,MAAO,EAAxC;AACA,SAAOT,KAAK,CAACD,GAAD,CAAL,CACJE,IADI,CACCT,UADD,EAEJS,IAFI,CAEER,GAAD,IAASA,GAAG,CAACS,IAAJ,EAFV,CAAP;AAGD,CANM","sourcesContent":["import { HOST } from './contants';\n\nconst checkError = (res) => {\n  if (res.status !== 200) {\n    throw new Error(res);\n    console.log(res);\n  }\n  return res;\n}\n\nexport const getRegions = () => {\n  const url = `${HOST}/regions`;\n  return fetch(url)\n    .then(checkError)\n    .then((res) => res.json());\n};\n\nexport const getDepartments = ( region = '') => {\n  const params = new URLSearchParams({ region });\n  const url = `${HOST}/departments?${params}`;\n  return fetch(url)\n    .then(checkError)\n    .then((res) => res.json());\n};\n\nexport const getTownships = (region = '', department = '') => {\n  const querys = new URLSearchParams({ region, department });\n  const url = `${HOST}/townships?${querys}`;\n  return fetch(url)\n    .then(checkError)\n    .then((res) => res.json());\n};\n\nexport const getTownshipByFullAddress = (region = '', department = '', township = '') => {\n  const querys = new URLSearchParams({ region, department, township });\n  const url = `${HOST}/townships?${querys}`;\n  return fetch(url)\n    .then(checkError)\n    .then((res) => res.json());\n};\n\nexport const getTownshipByPostalCode = (postalCode = '') => {\n  const querys = new URLSearchParams({ postalCode });\n  const url = `${HOST}/townships?${querys}`;\n  return fetch(url)\n    .then(checkError)\n    .then((res) => res.json());\n};\n"]},"metadata":{},"sourceType":"module"}