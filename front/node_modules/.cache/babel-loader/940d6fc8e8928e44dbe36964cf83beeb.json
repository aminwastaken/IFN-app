{"ast":null,"code":"var _jsxFileName = \"/home/amin/documents/school/green-it/IFN-app/front/src/components/SelectTownship/TabFullAddress.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useCallback, useEffect } from 'react';\nimport { Button, Grid, TextField } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { getDepartments, getRegions, getTownshipByFullAddress, getTownships } from '../../API/main';\nimport { useDispatch } from 'react-redux';\nimport { actionSetTownShip } from '../action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  departmentList: [],\n  regionList: [],\n  regionsLoaded: false,\n  selectedRegion: '',\n  selectedDepartment: '',\n  selectedTownship: '',\n  townShipList: []\n};\nconst SET_REGION_LIST = 'SET_REGION_LIST';\nconst SET_SELECTED_REGION = 'SET_SELECTED_REGION';\nconst SET_DEPARTMENT_LIST = 'SET_DEPARTMENT_LIST';\nconst SET_SELECTED_DEPARTMENT = 'SET_SELECTED_DEPARTMENT';\nconst SET_TOWN_SHIP_LIST = 'SET_TOWN_SHIP_LIST';\nconst SET_SELECTED_TOWNSHIP = 'SET_SELECTED_TOWNSHIP';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case SET_REGION_LIST:\n      return { ...state,\n        regionList: action.value,\n        regionsLoaded: true\n      };\n\n    case SET_SELECTED_REGION:\n      return { ...state,\n        selectedRegion: action.value,\n        departmentList: [],\n        selectedDepartment: '',\n        selectedTownship: '',\n        townShipList: []\n      };\n\n    case SET_DEPARTMENT_LIST:\n      return { ...state,\n        departmentList: action.value,\n        selectedTownship: '',\n        townShipList: []\n      };\n\n    case SET_SELECTED_DEPARTMENT:\n      return { ...state,\n        selectedDepartment: action.value\n      };\n\n    case SET_TOWN_SHIP_LIST:\n      return { ...state,\n        townShipList: action.value\n      };\n\n    case SET_SELECTED_TOWNSHIP:\n      return { ...state,\n        selectedTownship: action.value\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst TabFullAddress = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [{\n    departmentList,\n    regionList,\n    regionsLoaded,\n    selectedRegion,\n    selectedDepartment,\n    selectedTownship,\n    townShipList\n  }, dispatchState] = useReducer(reducer, initialState);\n  useEffect(() => {\n    if (!regionsLoaded) {\n      let unmounted = false;\n      getRegions().then(regions => {\n        if (!unmounted) {\n          dispatchState({\n            type: SET_REGION_LIST,\n            value: regions\n          });\n        }\n      }).catch(error => {\n        console.error('get region', error);\n      });\n      return () => {\n        unmounted = true;\n      };\n    }\n  }, [regionsLoaded]);\n  const onClickItemRegion = useCallback(e => {\n    const regionName = e.target.value;\n    dispatchState({\n      type: SET_SELECTED_REGION,\n      value: regionName\n    });\n    getDepartments(regionName).then(departments => {\n      dispatchState({\n        type: SET_DEPARTMENT_LIST,\n        value: departments\n      });\n    }).catch(error => {\n      console.error('', error);\n    });\n  }, []);\n  const onClickItemDepartment = useCallback(e => {\n    const departmentName = e.target.value;\n    dispatchState({\n      type: SET_SELECTED_DEPARTMENT,\n      value: departmentName\n    });\n    getTownships(selectedRegion, departmentName).then(townShips => {\n      dispatchState({\n        type: SET_TOWN_SHIP_LIST,\n        value: townShips\n      });\n    }).catch(error => {\n      console.error('getTownship', error);\n    });\n  }, [selectedRegion]);\n  const onClickItemTownShip = useCallback(e => {\n    const townshipName = e.target.value;\n    dispatchState({\n      type: SET_SELECTED_TOWNSHIP,\n      value: townshipName\n    });\n  }, []);\n  const toggleSearch = useCallback(() => {\n    getTownshipByFullAddress(selectedRegion, selectedDepartment, selectedTownship).then(township => {\n      dispatch(actionSetTownShip(township));\n    }).catch(e => {\n      console.error('getTownshipByFullAddress', e);\n    });\n  }, [dispatch, selectedDepartment, selectedRegion, selectedTownship]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    style: {\n      marginTop: 20,\n      justifyContent: 'space-between'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      md: 3,\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        options: regionList,\n        getOptionLabel: option => option,\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          label: \"R\\xE9gion\",\n          placeholder: \"R\\xE9gion\",\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this),\n        onSelect: onClickItemRegion,\n        onChange: e => {\n          console.log(e);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      md: 3,\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        options: departmentList,\n        getOptionLabel: option => option,\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          label: \"D\\xE9partement\",\n          placeholder: \"D\\xE9partement\",\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this),\n        onSelect: onClickItemDepartment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      md: 3,\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        options: townShipList,\n        getOptionLabel: option => option,\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          label: \"Commune\",\n          placeholder: \"Commune\",\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this),\n        onSelect: onClickItemTownShip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: toggleSearch,\n      children: \"Recherche\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TabFullAddress, \"I+63OlPHs+r/jxQez7BDjU+d8uQ=\", false, function () {\n  return [useDispatch];\n});\n\n_c = TabFullAddress;\nexport default TabFullAddress;\n\nvar _c;\n\n$RefreshReg$(_c, \"TabFullAddress\");","map":{"version":3,"sources":["/home/amin/documents/school/green-it/IFN-app/front/src/components/SelectTownship/TabFullAddress.js"],"names":["React","useReducer","useCallback","useEffect","Button","Grid","TextField","Autocomplete","getDepartments","getRegions","getTownshipByFullAddress","getTownships","useDispatch","actionSetTownShip","initialState","departmentList","regionList","regionsLoaded","selectedRegion","selectedDepartment","selectedTownship","townShipList","SET_REGION_LIST","SET_SELECTED_REGION","SET_DEPARTMENT_LIST","SET_SELECTED_DEPARTMENT","SET_TOWN_SHIP_LIST","SET_SELECTED_TOWNSHIP","reducer","state","action","type","value","TabFullAddress","dispatch","dispatchState","unmounted","then","regions","catch","error","console","onClickItemRegion","e","regionName","target","departments","onClickItemDepartment","departmentName","townShips","onClickItemTownShip","townshipName","toggleSearch","township","marginTop","justifyContent","option","params","log"],"mappings":"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","sourcesContent":["import React, { useReducer, useCallback, useEffect } from 'react';\n\nimport {\n  Button,\n  Grid,\n  TextField\n} from '@material-ui/core';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport {\n  getDepartments,\n  getRegions,\n  getTownshipByFullAddress,\n  getTownships\n} from '../../API/main';\n\nimport { useDispatch } from 'react-redux';\nimport { actionSetTownShip } from '../action';\n\nconst initialState = {\n  departmentList: [],\n  regionList: [],\n  regionsLoaded : false,\n  selectedRegion: '',\n  selectedDepartment: '',\n  selectedTownship: '',\n  townShipList: [],\n};\n\nconst SET_REGION_LIST = 'SET_REGION_LIST';\nconst SET_SELECTED_REGION = 'SET_SELECTED_REGION';\n\nconst SET_DEPARTMENT_LIST = 'SET_DEPARTMENT_LIST';\nconst SET_SELECTED_DEPARTMENT = 'SET_SELECTED_DEPARTMENT';\n\nconst SET_TOWN_SHIP_LIST = 'SET_TOWN_SHIP_LIST';\nconst SET_SELECTED_TOWNSHIP = 'SET_SELECTED_TOWNSHIP';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n\n    case SET_REGION_LIST:\n      return {\n        ...state,\n        regionList: action.value,\n        regionsLoaded: true,\n      };\n\n    case SET_SELECTED_REGION:\n      return {\n        ...state,\n        selectedRegion: action.value,\n        departmentList: [],\n        selectedDepartment: '',\n        selectedTownship: '',\n        townShipList: [],\n      };\n\n    case SET_DEPARTMENT_LIST:\n      return {\n        ...state,\n        departmentList: action.value,\n        selectedTownship: '',\n        townShipList: [],\n      };\n\n    case SET_SELECTED_DEPARTMENT:\n      return {...state, selectedDepartment: action.value};\n\n    case SET_TOWN_SHIP_LIST:\n      return {\n        ...state,\n        townShipList: action.value,\n      };\n\n    case SET_SELECTED_TOWNSHIP:\n      return {...state, selectedTownship: action.value};\n\n    default:\n      return state;\n  }\n};\n\nconst TabFullAddress = () => {\n  const dispatch = useDispatch();\n\n  const [\n    {\n      departmentList,\n      regionList,\n      regionsLoaded,\n      selectedRegion,\n      selectedDepartment,\n      selectedTownship,\n      townShipList,\n    },\n    dispatchState,\n  ] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    if (!regionsLoaded) {\n      let unmounted = false;\n      getRegions()\n        .then((regions) => {\n          if (!unmounted) {\n            dispatchState({ type: SET_REGION_LIST, value: regions });\n          }\n        })\n        .catch((error) => {\n          console.error('get region', error);\n        });\n\n      return () => {\n        unmounted = true;\n      };\n    }\n  }, [regionsLoaded]);\n\n  const onClickItemRegion = useCallback((e) => {\n    const regionName = e.target.value;\n    dispatchState({ type: SET_SELECTED_REGION, value: regionName });\n    getDepartments(regionName)\n      .then((departments) => {\n        dispatchState({ type: SET_DEPARTMENT_LIST, value: departments });\n      })\n      .catch((error) => {\n        console.error('', error);\n      });  \n  }, []);\n\n  const onClickItemDepartment = useCallback((e) => {\n    const departmentName = e.target.value;\n    dispatchState({ type: SET_SELECTED_DEPARTMENT, value: departmentName });\n    getTownships(selectedRegion, departmentName)\n      .then((townShips) => {\n        dispatchState({ type: SET_TOWN_SHIP_LIST, value: townShips });\n      })\n      .catch((error) => {\n        console.error('getTownship', error);\n      });\n  }, [selectedRegion]);\n\n  const onClickItemTownShip = useCallback((e) => {\n    const townshipName = e.target.value;\n    dispatchState({ type: SET_SELECTED_TOWNSHIP, value: townshipName });\n  }, []);\n\n  const toggleSearch = useCallback(() => {\n    getTownshipByFullAddress(selectedRegion, selectedDepartment, selectedTownship)\n      .then((township) => {\n        dispatch(actionSetTownShip(township));\n      })\n      .catch((e) => {\n        console.error('getTownshipByFullAddress', e);\n      });\n  }, [dispatch, selectedDepartment, selectedRegion, selectedTownship]);\n\n  return (\n    <Grid container item xs={12} style={{ marginTop: 20, justifyContent: 'space-between' }}>\n      <Grid item md={3}>\n        <Autocomplete\n          options={regionList}\n          getOptionLabel={(option) => option}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"Région\"\n              placeholder=\"Région\"\n              variant=\"outlined\"\n            />\n          )}\n          onSelect={onClickItemRegion}\n          onChange={(e) => {\n            console.log(e);\n          }}\n        />\n      </Grid>\n      <Grid item md={3}>\n        <Autocomplete\n          options={departmentList}\n          getOptionLabel={(option) => option}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"Département\"\n              placeholder=\"Département\"\n              variant=\"outlined\"\n            />\n          )}\n          onSelect={onClickItemDepartment}\n        />\n      </Grid>\n      <Grid item md={3}>\n        <Autocomplete\n          options={townShipList}\n          getOptionLabel={(option) => option}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"Commune\"\n              placeholder=\"Commune\"\n              variant=\"outlined\"\n            />\n          )}\n          onSelect={onClickItemTownShip}\n        />\n      </Grid>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={toggleSearch}\n      >\n        Recherche\n      </Button>\n    </Grid>\n  );\n}\n\nexport default TabFullAddress;\n"]},"metadata":{},"sourceType":"module"}